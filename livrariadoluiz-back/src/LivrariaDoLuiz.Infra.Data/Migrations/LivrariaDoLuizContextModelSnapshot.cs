// <auto-generated />
using System;
using LivrariaDoLuiz.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LivrariaDoLuiz.Infra.Data.Migrations
{
    [DbContext(typeof(LivrariaDoLuizContext))]
    partial class LivrariaDoLuizContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LivrariaDoLuiz.Domain.Entity.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnOrder(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("Author", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("589039c8-145e-43c9-b6ec-30d027b99f32"),
                            CreatedAt = new DateTime(2024, 7, 20, 1, 47, 26, 141, DateTimeKind.Utc).AddTicks(6034),
                            Name = "Author 1"
                        },
                        new
                        {
                            Id = new Guid("0a78abfb-1470-46a6-bafe-4c2d83d1a8dc"),
                            CreatedAt = new DateTime(2024, 7, 20, 1, 47, 26, 141, DateTimeKind.Utc).AddTicks(6060),
                            Name = "Author 2"
                        },
                        new
                        {
                            Id = new Guid("83a31b94-1872-4f6d-a344-622e590a4421"),
                            CreatedAt = new DateTime(2024, 7, 20, 1, 47, 26, 141, DateTimeKind.Utc).AddTicks(6061),
                            Name = "Author 3"
                        },
                        new
                        {
                            Id = new Guid("a560d133-7005-4d89-894c-a115993fa9c2"),
                            CreatedAt = new DateTime(2024, 7, 20, 1, 47, 26, 141, DateTimeKind.Utc).AddTicks(6063),
                            Name = "Author 4"
                        },
                        new
                        {
                            Id = new Guid("76662f83-0688-494b-b598-6b55671ad4bf"),
                            CreatedAt = new DateTime(2024, 7, 20, 1, 47, 26, 141, DateTimeKind.Utc).AddTicks(6064),
                            Name = "Author 5"
                        });
                });

            modelBuilder.Entity("LivrariaDoLuiz.Domain.Entity.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnOrder(1);

                    b.Property<int>("Edition")
                        .HasColumnType("int");

                    b.Property<Guid>("GenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnOrder(2);

                    b.Property<int>("Pages")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GenderId");

                    b.ToTable("Book", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a3b21d97-e3d6-4794-b5c5-64833ca7d3bb"),
                            AuthorId = new Guid("589039c8-145e-43c9-b6ec-30d027b99f32"),
                            CreatedAt = new DateTime(2024, 7, 20, 1, 47, 26, 141, DateTimeKind.Utc).AddTicks(6286),
                            Edition = 1,
                            GenderId = new Guid("6befc28a-de38-4e49-bb23-376ed22925ff"),
                            ISBN = "Xpto",
                            Language = "Portuguese",
                            Name = "Game of Thrones: As Crônicas de Gelo e Fogo",
                            Pages = 700
                        });
                });

            modelBuilder.Entity("LivrariaDoLuiz.Domain.Entity.Gender", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnOrder(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("Gender", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("70c3b7c4-6d88-49d1-9745-77231b022694"),
                            CreatedAt = new DateTime(2024, 7, 20, 1, 47, 26, 141, DateTimeKind.Utc).AddTicks(6151),
                            Name = "Gender 1"
                        },
                        new
                        {
                            Id = new Guid("d3001e55-7bce-4b3b-9d85-e6d148b4b7a4"),
                            CreatedAt = new DateTime(2024, 7, 20, 1, 47, 26, 141, DateTimeKind.Utc).AddTicks(6156),
                            Name = "Gender 2"
                        },
                        new
                        {
                            Id = new Guid("6befc28a-de38-4e49-bb23-376ed22925ff"),
                            CreatedAt = new DateTime(2024, 7, 20, 1, 47, 26, 141, DateTimeKind.Utc).AddTicks(6157),
                            Name = "Gender 3"
                        },
                        new
                        {
                            Id = new Guid("036b0792-20e0-4c92-98cf-05de89c0fbca"),
                            CreatedAt = new DateTime(2024, 7, 20, 1, 47, 26, 141, DateTimeKind.Utc).AddTicks(6159),
                            Name = "Gender 4"
                        },
                        new
                        {
                            Id = new Guid("ffe63f4e-a7ff-4cde-bb74-2dd325ca5c0b"),
                            CreatedAt = new DateTime(2024, 7, 20, 1, 47, 26, 141, DateTimeKind.Utc).AddTicks(6160),
                            Name = "Gender 5"
                        });
                });

            modelBuilder.Entity("LivrariaDoLuiz.Domain.Entity.Book", b =>
                {
                    b.HasOne("LivrariaDoLuiz.Domain.Entity.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LivrariaDoLuiz.Domain.Entity.Gender", "Gender")
                        .WithMany("Books")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("LivrariaDoLuiz.Domain.Entity.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LivrariaDoLuiz.Domain.Entity.Gender", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
